# Application Configuration
spring.application.name=genai-worker
server.port=8083

# RabbitMQ Configuration
spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${RABBITMQ_PORT:5672}
spring.rabbitmq.username=${RABBITMQ_USERNAME:guest}
spring.rabbitmq.password=${RABBITMQ_PASSWORD:guest}

# Google Gemini API Configuration
gemini.api.key=${GEMINI_API_KEY:}
gemini.api.url=https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent
gemini.model=models/gemini-2.5-flash
gemini.max.tokens=1000
gemini.temperature=0.7

# GenAI Configuration
genai.summary.max-input-length=50000
genai.summary.retry.max-attempts=3
genai.summary.retry.delay-ms=2000
genai.summary.timeout-seconds=30

# Logging Configuration
logging.level.root=INFO
logging.level.fhtw.wien.genaiworker=DEBUG
logging.level.org.springframework.amqp=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg%n

# Resilience4j Circuit Breaker Configuration for Gemini API
resilience4j.circuitbreaker.instances.geminiService.sliding-window-size=10
resilience4j.circuitbreaker.instances.geminiService.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.geminiService.wait-duration-in-open-state=60s
resilience4j.circuitbreaker.instances.geminiService.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.geminiService.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.geminiService.minimum-number-of-calls=5

# Resilience4j Retry Configuration for Gemini API
resilience4j.retry.instances.geminiService.max-attempts=3
resilience4j.retry.instances.geminiService.wait-duration=2s
resilience4j.retry.instances.geminiService.enable-exponential-backoff=true
resilience4j.retry.instances.geminiService.exponential-backoff-multiplier=2
resilience4j.retry.instances.geminiService.retry-exceptions=org.springframework.web.client.HttpServerErrorException,org.springframework.web.client.ResourceAccessException,java.net.SocketTimeoutException

# Resilience4j Rate Limiter for Gemini API (to avoid hitting API limits)
resilience4j.ratelimiter.instances.geminiService.limit-for-period=10
resilience4j.ratelimiter.instances.geminiService.limit-refresh-period=60s
resilience4j.ratelimiter.instances.geminiService.timeout-duration=5s

# Resilience4j Time Limiter
resilience4j.timelimiter.instances.geminiService.timeout-duration=30s
resilience4j.timelimiter.instances.geminiService.cancel-running-future=true

# Spring Boot Actuator Health Endpoint Configuration
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
