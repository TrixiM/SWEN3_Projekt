import { 
    API_CONFIG, 
    TOAST_TYPES, 
    showMessage, 
    escapeHtml, 
    formatBytes, 
    formatDate, 
    apiRequest, 
    validateFile, 
    debounce 
} from './utils.js';

/**
 * Modern class-based document management system.
 * Replaces global variables with proper encapsulation and state management.
 */
export class DocumentManager {
    
    // Private fields
    #documents = [];
    #domElements = {};
    #currentPdfPreview = {
        documentId: null,
        currentPage: 1,
        totalPages: 0
    };
    
    // Configuration constants
    static #CONFIG = {
        FILTER_DEBOUNCE_DELAY: 300,
        MAX_FILE_SIZE: 100 * 1024 * 1024, // 100MB
        PDF_SCALE: 1.5,
        SIZE_FILTERS: {
            SMALL: { max: 1024 * 1024 }, // < 1MB
            MEDIUM: { min: 1024 * 1024, max: 10 * 1024 * 1024 }, // 1-10MB
            LARGE: { min: 10 * 1024 * 1024 } // > 10MB
        },
        STATUS_CLASSES: {
            'NEW': 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-300',
            'UPLOADED': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',
            'OCR_PENDING': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',
            'OCR_IN_PROGRESS': 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300',
            'OCR_COMPLETED': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',
            'OCR_FAILED': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
        }
    };
    
    constructor() {
        this.#initializeElements();
        this.#setupEventListeners();
        this.loadDocuments();
    }
    
    /**
     * Initialize DOM elements with error handling
     */
    #initializeElements() {
        try {
            this.#domElements = {
                tbody: document.getElementById('documents-tbody'),
                fileInput: document.querySelector('input[type="file"]'),
                searchInput: document.getElementById('search-input'),
                filterContentType: document.getElementById('filter-content-type'),
                filterSize: document.getElementById('filter-size'),
                filterStatus: document.getElementById('filter-status'),
                tagsInput: document.getElementById('tags-input'),
                pdfModal: document.getElementById('pdf-modal'),
                pdfModalTitle: document.getElementById('pdf-modal-title'),
                pdfImage: document.getElementById('pdf-image'),
                pdfLoading: document.getElementById('pdf-loading'),
                pdfError: document.getElementById('pdf-error'),
                pageCount: document.getElementById('page-count'),
                pageNum: document.getElementById('page-num'),
                prevPageBtn: document.getElementById('prev-page'),
                nextPageBtn: document.getElementById('next-page')\n            };\n            \n            // Validate required elements\n            if (!this.#domElements.tbody) {\n                throw new Error('Required element documents-tbody not found');\n            }\n        } catch (error) {\n            console.error('Failed to initialize DOM elements:', error);\n            showMessage('Failed to initialize application', TOAST_TYPES.ERROR);\n        }\n    }\n    \n    /**\n     * Setup event listeners with proper error handling and debouncing\n     */\n    #setupEventListeners() {\n        const debouncedFilter = debounce(() => this.#filterDocuments(), DocumentManager.#CONFIG.FILTER_DEBOUNCE_DELAY);\n        \n        // File upload\n        this.#addEventListenerSafely(this.#domElements.fileInput, 'change', () => this.handleFileUpload());\n        \n        // Search with debouncing\n        this.#addEventListenerSafely(this.#domElements.searchInput, 'input', debouncedFilter);\n        \n        // Filters\n        this.#addEventListenerSafely(this.#domElements.filterContentType, 'change', () => this.#filterDocuments());\n        this.#addEventListenerSafely(this.#domElements.filterSize, 'change', () => this.#filterDocuments());\n        this.#addEventListenerSafely(this.#domElements.filterStatus, 'change', () => this.#filterDocuments());\n        \n        // PDF preview modal\n        this.#addEventListenerSafely(this.#domElements.pdfModal, 'click', (e) => {\n            if (e.target === this.#domElements.pdfModal) {\n                this.closePdfModal();\n            }\n        });\n        \n        // PDF navigation\n        this.#addEventListenerSafely(this.#domElements.prevPageBtn, 'click', () => this.previousPage());\n        this.#addEventListenerSafely(this.#domElements.nextPageBtn, 'click', () => this.nextPage());\n    }\n    \n    /**\n     * Safely add event listeners with null checks\n     */\n    #addEventListenerSafely(element, event, handler) {\n        if (element) {\n            element.addEventListener(event, handler);\n        }\n    }\n    \n    /**\n     * Load documents from API with error handling and loading states\n     */\n    async loadDocuments() {\n        try {\n            console.log('Loading documents...');\n            this.#showLoadingState();\n            \n            this.#documents = await apiRequest(API_CONFIG.ENDPOINTS.DOCUMENTS);\n            console.log('Documents loaded:', this.#documents.length);\n            \n            this.#filterDocuments();\n        } catch (error) {\n            console.error('Error loading documents:', error);\n            this.#showLoadError(error.message);\n        }\n    }\n    \n    /**\n     * Show loading state in table\n     */\n    #showLoadingState() {\n        if (this.#domElements.tbody) {\n            this.#domElements.tbody.innerHTML = `\n                <tr class=\"border-b border-border-light dark:border-border-dark\">\n                    <td colspan=\"6\" class=\"px-6 py-8 text-center\">\n                        <div class=\"flex items-center justify-center\">\n                            <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n                            <span class=\"ml-3\">Loading documents...</span>\n                        </div>\n                    </td>\n                </tr>\n            `;\n        }\n    }\n    \n    /**\n     * Show load error in table\n     */\n    #showLoadError(errorMessage) {\n        if (this.#domElements.tbody) {\n            this.#domElements.tbody.innerHTML = `\n                <tr class=\"border-b border-border-light dark:border-border-dark\">\n                    <td colspan=\"6\" class=\"px-6 py-8 text-center text-red-500\">\n                        Error loading documents: ${escapeHtml(errorMessage)}\n                        <br><span class=\"text-sm text-muted-light dark:text-muted-dark\">Make sure the backend is running and accessible.</span>\n                        <br><button onclick=\"documentManager.loadDocuments()\" class=\"mt-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\">Retry</button>\n                    </td>\n                </tr>\n            `;\n        }\n    }\n    \n    /**\n     * Filter documents based on current filter values\n     */\n    #filterDocuments() {\n        if (!this.#documents || !this.#domElements.tbody) return;\n        \n        const filters = this.#getCurrentFilters();\n        const filtered = this.#documents.filter(doc => this.#matchesAllFilters(doc, filters));\n        \n        this.#displayDocuments(filtered);\n    }\n    \n    /**\n     * Get current filter values from DOM\n     */\n    #getCurrentFilters() {\n        return {\n            searchTerm: this.#domElements.searchInput?.value.toLowerCase() || '',\n            contentType: this.#domElements.filterContentType?.value || '',\n            size: this.#domElements.filterSize?.value || '',\n            status: this.#domElements.filterStatus?.value || ''\n        };\n    }\n    \n    /**\n     * Check if document matches all current filters\n     */\n    #matchesAllFilters(doc, filters) {\n        return this.#matchesSearchFilter(doc, filters.searchTerm) &&\n               this.#matchesContentTypeFilter(doc, filters.contentType) &&\n               this.#matchesSizeFilter(doc, filters.size) &&\n               this.#matchesStatusFilter(doc, filters.status);\n    }\n    \n    /**\n     * Check if document matches search filter\n     */\n    #matchesSearchFilter(doc, searchTerm) {\n        if (!searchTerm) return true;\n        \n        const searchableText = [\n            doc.title,\n            doc.originalFilename,\n            doc.contentType,\n            doc.status,\n            formatBytes(doc.sizeBytes),\n            doc.id,\n            ...(doc.tags || [])\n        ].join(' ').toLowerCase();\n        \n        return searchableText.includes(searchTerm);\n    }\n    \n    /**\n     * Check if document matches content type filter\n     */\n    #matchesContentTypeFilter(doc, contentType) {\n        return !contentType || doc.contentType.startsWith(contentType);\n    }\n    \n    /**\n     * Check if document matches size filter\n     */\n    #matchesSizeFilter(doc, sizeFilter) {\n        if (!sizeFilter) return true;\n        \n        const filterConfig = DocumentManager.#CONFIG.SIZE_FILTERS[sizeFilter.toUpperCase()];\n        if (!filterConfig) return true;\n        \n        const withinMin = !filterConfig.min || doc.sizeBytes >= filterConfig.min;\n        const withinMax = !filterConfig.max || doc.sizeBytes < filterConfig.max;\n        \n        return withinMin && withinMax;\n    }\n    \n    /**\n     * Check if document matches status filter\n     */\n    #matchesStatusFilter(doc, status) {\n        return !status || doc.status === status;\n    }\n    \n    /**\n     * Display documents in table with improved rendering\n     */\n    #displayDocuments(documents) {\n        if (!documents || documents.length === 0) {\n            this.#showEmptyState();\n            return;\n        }\n        \n        const rows = documents.map(doc => this.#createDocumentRow(doc)).join('');\n        this.#domElements.tbody.innerHTML = rows;\n    }\n    \n    /**\n     * Show empty state in table\n     */\n    #showEmptyState() {\n        const message = this.#documents.length === 0 \n            ? 'No documents found. Upload your first document to get started!'\n            : 'No documents match your filters.';\n            \n        this.#domElements.tbody.innerHTML = `\n            <tr class=\"border-b border-border-light dark:border-border-dark\">\n                <td colspan=\"6\" class=\"px-6 py-8 text-center text-muted-light dark:text-muted-dark\">\n                    ${message}\n                </td>\n            </tr>\n        `;\n    }\n    \n    /**\n     * Create HTML row for a document\n     */\n    #createDocumentRow(doc) {\n        const statusClass = this.#getStatusClass(doc.status);\n        const isPdf = doc.contentType === 'application/pdf';\n        const rowClass = isPdf ? 'cursor-pointer' : '';\n        const onClickAttr = isPdf ? `onclick=\"documentManager.openPdfPreview('${doc.id}', '${escapeHtml(doc.title)}')\"` : '';\n        const tagsHtml = this.#createTagsHtml(doc.tags);\n        \n        return `\n            <tr class=\"border-b border-border-light dark:border-border-dark hover:bg-background-light dark:hover:bg-background-dark transition-colors ${rowClass}\" ${onClickAttr}>\n                <td class=\"px-6 py-4\">\n                    <div class=\"font-medium text-foreground-light dark:text-foreground-dark flex items-center gap-2\">\n                        ${isPdf ? '<span class=\"material-symbols-outlined text-red-500 text-sm\">picture_as_pdf</span>' : ''}\n                        ${escapeHtml(doc.title)}\n                    </div>\n                    <div class=\"text-xs text-muted-light dark:text-muted-dark\">${escapeHtml(doc.originalFilename)}</div>\n                    ${tagsHtml}\n                </td>\n                <td class=\"px-6 py-4 text-muted-light dark:text-muted-dark\">${escapeHtml(doc.contentType)}</td>\n                <td class=\"px-6 py-4 text-muted-light dark:text-muted-dark\">${formatBytes(doc.sizeBytes)}</td>\n                <td class=\"px-6 py-4\">\n                    <span class=\"px-2 py-1 text-xs font-medium rounded-full ${statusClass}\">${escapeHtml(doc.status)}</span>\n                </td>\n                <td class=\"px-6 py-4 text-muted-light dark:text-muted-dark\">${formatDate(doc.createdAt)}</td>\n                <td class=\"px-6 py-4\">\n                    <button onclick=\"event.stopPropagation(); documentManager.editDocument('${doc.id}')\" \n                            class=\"text-blue-500 hover:text-blue-700 dark:hover:text-blue-300 transition-colors mr-2\" \n                            title=\"Edit document\">\n                        <span class=\"material-symbols-outlined text-xl\">edit</span>\n                    </button>\n                    <button onclick=\"event.stopPropagation(); documentManager.deleteDocument('${doc.id}')\" \n                            class=\"text-red-500 hover:text-red-700 dark:hover:text-red-400 transition-colors\" \n                            title=\"Delete document\">\n                        <span class=\"material-symbols-outlined text-xl\">delete</span>\n                    </button>\n                </td>\n            </tr>\n        `;\n    }\n    \n    /**\n     * Create HTML for document tags\n     */\n    #createTagsHtml(tags) {\n        if (!tags || tags.length === 0) return '';\n        \n        const tagElements = tags.map(tag => \n            `<span class=\"px-2 py-0.5 text-xs bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300 rounded\">${escapeHtml(tag)}</span>`\n        ).join('');\n        \n        return `<div class=\"flex flex-wrap gap-1 mt-1\">${tagElements}</div>`;\n    }\n    \n    /**\n     * Get CSS classes for document status\n     */\n    #getStatusClass(status) {\n        return DocumentManager.#CONFIG.STATUS_CLASSES[status] || 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n    \n    /**\n     * Handle file upload with validation and progress tracking\n     */\n    async handleFileUpload() {\n        const files = this.#domElements.fileInput?.files;\n        if (!files || files.length === 0) return;\n        \n        const tags = this.#getTagsFromInput();\n        const uploadResults = await this.#processFileUploads(files, tags);\n        \n        this.#handleUploadResults(uploadResults);\n    }\n    \n    /**\n     * Get tags from input field\n     */\n    #getTagsFromInput() {\n        const tagsInput = this.#domElements.tagsInput;\n        if (!tagsInput || !tagsInput.value.trim()) return [];\n        \n        return tagsInput.value\n            .split(',')\n            .map(tag => tag.trim())\n            .filter(tag => tag.length > 0);\n    }\n    \n    /**\n     * Process multiple file uploads\n     */\n    async #processFileUploads(files, tags) {\n        const results = { successful: [], failed: [] };\n        \n        for (const file of files) {\n            try {\n                const validation = validateFile(file, { maxSize: DocumentManager.#CONFIG.MAX_FILE_SIZE });\n                if (!validation.isValid) {\n                    results.failed.push({ file: file.name, error: validation.error });\n                    continue;\n                }\n                \n                await this.#uploadSingleFile(file, tags);\n                results.successful.push(file.name);\n                \n            } catch (error) {\n                console.error('Upload error:', error);\n                results.failed.push({ file: file.name, error: error.message });\n            }\n        }\n        \n        return results;\n    }\n    \n    /**\n     * Upload single file\n     */\n    async #uploadSingleFile(file, tags) {\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('title', file.name);\n        \n        tags.forEach(tag => formData.append('tags', tag));\n        \n        console.log('Uploading document:', file.name, 'with tags:', tags);\n        \n        const response = await fetch(API_CONFIG.BASE_URL + API_CONFIG.ENDPOINTS.DOCUMENTS, {\n            method: 'POST',\n            body: formData\n        });\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        return await response.json();\n    }\n    \n    /**\n     * Handle upload results and show appropriate messages\n     */\n    #handleUploadResults(results) {\n        // Show error messages for failed uploads\n        results.failed.forEach(failure => {\n            showMessage(`File \"${failure.file}\": ${failure.error}`, TOAST_TYPES.ERROR);\n        });\n        \n        // Show success message and reload if any uploads succeeded\n        if (results.successful.length > 0) {\n            this.#clearUploadForm();\n            this.loadDocuments();\n            \n            const message = results.successful.length === 1\n                ? `Document \"${results.successful[0]}\" uploaded successfully!`\n                : `${results.successful.length} documents uploaded successfully!`;\n                \n            showMessage(message, TOAST_TYPES.SUCCESS);\n        }\n    }\n    \n    /**\n     * Clear upload form\n     */\n    #clearUploadForm() {\n        if (this.#domElements.fileInput) {\n            this.#domElements.fileInput.value = '';\n        }\n        if (this.#domElements.tagsInput) {\n            this.#domElements.tagsInput.value = '';\n        }\n    }\n    \n    /**\n     * Edit document - navigate to edit page\n     */\n    editDocument(documentId) {\n        const doc = this.#documents.find(d => d.id === documentId);\n        if (!doc) {\n            showMessage('Document not found', TOAST_TYPES.ERROR);\n            return;\n        }\n        \n        localStorage.setItem('selectedDocument', JSON.stringify(doc));\n        window.location.href = 'docDetail.html';\n    }\n    \n    /**\n     * Delete document with confirmation\n     */\n    async deleteDocument(documentId) {\n        if (!confirm('Are you sure you want to delete this document?')) {\n            return;\n        }\n        \n        try {\n            await apiRequest(API_CONFIG.ENDPOINTS.DOCUMENT_BY_ID(documentId), {\n                method: 'DELETE'\n            });\n            \n            console.log('Document deleted:', documentId);\n            this.loadDocuments();\n            showMessage('Document deleted successfully!', TOAST_TYPES.SUCCESS);\n            \n        } catch (error) {\n            console.error('Error deleting document:', error);\n            showMessage(`Error deleting document: ${error.message}`, TOAST_TYPES.ERROR);\n        }\n    }\n    \n    // PDF Preview Methods\n    \n    /**\n     * Open PDF preview modal\n     */\n    async openPdfPreview(documentId, title) {\n        if (!this.#domElements.pdfModal) return;\n        \n        this.#showPdfModal(title);\n        \n        try {\n            const totalPages = await apiRequest(API_CONFIG.ENDPOINTS.DOCUMENT_PAGE_COUNT(documentId));\n            \n            this.#currentPdfPreview = {\n                documentId,\n                currentPage: 1,\n                totalPages\n            };\n            \n            this.#updatePdfNavigation();\n            await this.#renderPdfPage(1);\n            \n        } catch (error) {\n            console.error('Error loading PDF:', error);\n            this.#showPdfError(`Error loading PDF: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Show PDF modal\n     */\n    #showPdfModal(title) {\n        this.#domElements.pdfModal.classList.remove('hidden');\n        if (this.#domElements.pdfModalTitle) {\n            this.#domElements.pdfModalTitle.textContent = title;\n        }\n        \n        // Reset states\n        if (this.#domElements.pdfImage) this.#domElements.pdfImage.style.display = 'none';\n        if (this.#domElements.pdfLoading) this.#domElements.pdfLoading.style.display = 'block';\n        if (this.#domElements.pdfError) this.#domElements.pdfError.classList.add('hidden');\n    }\n    \n    /**\n     * Show PDF error\n     */\n    #showPdfError(message) {\n        if (this.#domElements.pdfLoading) this.#domElements.pdfLoading.style.display = 'none';\n        if (this.#domElements.pdfError) {\n            this.#domElements.pdfError.classList.remove('hidden');\n            this.#domElements.pdfError.textContent = message;\n        }\n    }\n    \n    /**\n     * Update PDF navigation buttons and counters\n     */\n    #updatePdfNavigation() {\n        if (this.#domElements.pageCount) {\n            this.#domElements.pageCount.textContent = this.#currentPdfPreview.totalPages;\n        }\n        if (this.#domElements.pageNum) {\n            this.#domElements.pageNum.textContent = this.#currentPdfPreview.currentPage;\n        }\n        if (this.#domElements.prevPageBtn) {\n            this.#domElements.prevPageBtn.disabled = this.#currentPdfPreview.currentPage === 1;\n        }\n        if (this.#domElements.nextPageBtn) {\n            this.#domElements.nextPageBtn.disabled = this.#currentPdfPreview.currentPage === this.#currentPdfPreview.totalPages;\n        }\n    }\n    \n    /**\n     * Render PDF page\n     */\n    async #renderPdfPage(pageNum) {\n        if (!this.#currentPdfPreview.documentId) return;\n        \n        try {\n            if (this.#domElements.pdfLoading) this.#domElements.pdfLoading.style.display = 'block';\n            if (this.#domElements.pdfImage) this.#domElements.pdfImage.style.display = 'none';\n            \n            const response = await fetch(\n                API_CONFIG.BASE_URL + API_CONFIG.ENDPOINTS.DOCUMENT_PAGES(\n                    this.#currentPdfPreview.documentId, \n                    pageNum, \n                    DocumentManager.#CONFIG.PDF_SCALE\n                )\n            );\n            \n            if (!response.ok) {\n                throw new Error(`Failed to render page: ${response.status}`);\n            }\n            \n            const blob = await response.blob();\n            const imageUrl = URL.createObjectURL(blob);\n            \n            if (this.#domElements.pdfImage) {\n                // Clean up previous URL\n                if (this.#domElements.pdfImage.src) {\n                    URL.revokeObjectURL(this.#domElements.pdfImage.src);\n                }\n                \n                this.#domElements.pdfImage.src = imageUrl;\n                this.#domElements.pdfImage.style.display = 'block';\n            }\n            \n            this.#currentPdfPreview.currentPage = pageNum;\n            this.#updatePdfNavigation();\n            \n            if (this.#domElements.pdfLoading) this.#domElements.pdfLoading.style.display = 'none';\n            \n        } catch (error) {\n            console.error('Error rendering page:', error);\n            this.#showPdfError(`Error rendering page: ${error.message}`);\n        }\n    }\n    \n    /**\n     * Navigate to previous PDF page\n     */\n    previousPage() {\n        if (this.#currentPdfPreview.currentPage <= 1) return;\n        this.#renderPdfPage(this.#currentPdfPreview.currentPage - 1);\n    }\n    \n    /**\n     * Navigate to next PDF page\n     */\n    nextPage() {\n        if (this.#currentPdfPreview.currentPage >= this.#currentPdfPreview.totalPages) return;\n        this.#renderPdfPage(this.#currentPdfPreview.currentPage + 1);\n    }\n    \n    /**\n     * Close PDF preview modal\n     */\n    closePdfModal() {\n        if (this.#domElements.pdfModal) {\n            this.#domElements.pdfModal.classList.add('hidden');\n        }\n        \n        // Clean up image URL\n        if (this.#domElements.pdfImage && this.#domElements.pdfImage.src) {\n            URL.revokeObjectURL(this.#domElements.pdfImage.src);\n            this.#domElements.pdfImage.src = '';\n        }\n        \n        // Reset state\n        this.#currentPdfPreview = {\n            documentId: null,\n            currentPage: 1,\n            totalPages: 0\n        };\n    }\n}\n\n// Initialize global instance for backward compatibility\nlet documentManager;\ndocument.addEventListener('DOMContentLoaded', () => {\n    documentManager = new DocumentManager();\n    \n    // Make it globally accessible for HTML onclick handlers\n    window.documentManager = documentManager;\n});"},{"path":"/Users/mashmellu-macos/Desktop/fh/sem-5/swen-3/frontend/paperless-ui/js/DocumentManager.js","content":"1|import { \n2|    API_CONFIG, \n3|    TOAST_TYPES, \n4|    showMessage, \n5|    escapeHtml, \n6|    formatBytes, \n7|    formatDate, \n8|    apiRequest, \n9|    validateFile, \n10|    debounce \n11|} from './utils.js';\n12|\n13|/**\n14| * Modern class-based document management system.\n15| * Replaces global variables with proper encapsulation and state management.\n16| */\n17|export class DocumentManager {\n18|    \n19|    // Private fields\n20|    #documents = [];\n21|    #domElements = {};\n22|    #currentPdfPreview = {\n23|        documentId: null,\n24|        currentPage: 1,\n25|        totalPages: 0\n26|    };\n27|    \n28|    // Configuration constants\n29|    static #CONFIG = {\n30|        FILTER_DEBOUNCE_DELAY: 300,\n31|        MAX_FILE_SIZE: 100 * 1024 * 1024, // 100MB\n32|        PDF_SCALE: 1.5,\n33|        SIZE_FILTERS: {\n34|            SMALL: { max: 1024 * 1024 }, // < 1MB\n35|            MEDIUM: { min: 1024 * 1024, max: 10 * 1024 * 1024 }, // 1-10MB\n36|            LARGE: { min: 10 * 1024 * 1024 } // > 10MB\n37|        },\n38|        STATUS_CLASSES: {\n39|            'NEW': 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-300',\n40|            'UPLOADED': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',\n41|            'OCR_PENDING': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',\n42|            'OCR_IN_PROGRESS': 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300',\n43|            'OCR_COMPLETED': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',\n44|            'OCR_FAILED': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'\n45|        }\n46|    };\n47|    \n48|    constructor() {\n49|        this.#initializeElements();\n50|        this.#setupEventListeners();\n51|        this.loadDocuments();\n52|    }\n53|    \n54|    /**\n55|     * Initialize DOM elements with error handling\n56|     */\n57|    #initializeElements() {\n58|        try {\n59|            this.#domElements = {\n60|                tbody: document.getElementById('documents-tbody'),\n61|                fileInput: document.querySelector('input[type=\"file\"]'),\n62|                searchInput: document.getElementById('search-input'),\n63|                filterContentType: document.getElementById('filter-content-type'),\n64|                filterSize: document.getElementById('filter-size'),\n65|                filterStatus: document.getElementById('filter-status'),\n66|                tagsInput: document.getElementById('tags-input'),\n67|                pdfModal: document.getElementById('pdf-modal'),\n68|                pdfModalTitle: document.getElementById('pdf-modal-title'),\n69|                pdfImage: document.getElementById('pdf-image'),\n70|                pdfLoading: document.getElementById('pdf-loading'),\n71|                pdfError: document.getElementById('pdf-error'),\n72|                pageCount: document.getElementById('page-count'),\n73|                pageNum: document.getElementById('page-num'),\n74|                prevPageBtn: document.getElementById('prev-page'),\n75|                nextPageBtn: document.getElementById('next-page')\n76|            };\n77|            \n78|            // Validate required elements\n79|            if (!this.#domElements.tbody) {\n80|                throw new Error('Required element documents-tbody not found');\n81|            }\n82|        } catch (error) {\n83|            console.error('Failed to initialize DOM elements:', error);\n84|            showMessage('Failed to initialize application', TOAST_TYPES.ERROR);\n85|        }\n86|    }\n87|    \n88|    /**\n89|     * Setup event listeners with proper error handling and debouncing\n90|     */\n91|    #setupEventListeners() {\n92|        const debouncedFilter = debounce(() => this.#filterDocuments(), DocumentManager.#CONFIG.FILTER_DEBOUNCE_DELAY);\n93|        \n94|        // File upload\n95|        this.#addEventListenerSafely(this.#domElements.fileInput, 'change', () => this.handleFileUpload());\n96|        \n97|        // Search with debouncing\n98|        this.#addEventListenerSafely(this.#domElements.searchInput, 'input', debouncedFilter);\n99|        \n100|        // Filters\n101|        this.#addEventListenerSafely(this.#domElements.filterContentType, 'change', () => this.#filterDocuments());\n102|        this.#addEventListenerSafely(this.#domElements.filterSize, 'change', () => this.#filterDocuments());\n103|        this.#addEventListenerSafely(this.#domElements.filterStatus, 'change', () => this.#filterDocuments());\n104|        \n105|        // PDF preview modal\n106|        this.#addEventListenerSafely(this.#domElements.pdfModal, 'click', (e) => {\n107|            if (e.target === this.#domElements.pdfModal) {\n108|                this.closePdfModal();\n109|            }\n110|        });\n111|        \n112|        // PDF navigation\n113|        this.#addEventListenerSafely(this.#domElements.prevPageBtn, 'click', () => this.previousPage());\n114|        this.#addEventListenerSafely(this.#domElements.nextPageBtn, 'click', () => this.nextPage());\n115|    }\n116|    \n117|    /**\n118|     * Safely add event listeners with null checks\n119|     */\n120|    #addEventListenerSafely(element, event, handler) {\n121|        if (element) {\n122|            element.addEventListener(event, handler);\n123|        }\n124|    }\n125|    \n126|    /**\n127|     * Load documents from API with error handling and loading states\n128|     */\n129|    async loadDocuments() {\n130|        try {\n131|            console.log('Loading documents...');\n132|            this.#showLoadingState();\n133|            \n134|            this.#documents = await apiRequest(API_CONFIG.ENDPOINTS.DOCUMENTS);\n135|            console.log('Documents loaded:', this.#documents.length);\n136|            \n137|            this.#filterDocuments();\n138|        } catch (error) {\n139|            console.error('Error loading documents:', error);\n140|            this.#showLoadError(error.message);\n141|        }\n142|    }\n143|    \n144|    /**\n145|     * Show loading state in table\n146|     */\n147|    #showLoadingState() {\n148|        if (this.#domElements.tbody) {\n149|            this.#domElements.tbody.innerHTML = `\n150|                <tr class=\"border-b border-border-light dark:border-border-dark\">\n151|                    <td colspan=\"6\" class=\"px-6 py-8 text-center\">\n152|                        <div class=\"flex items-center justify-center\">\n153|                            <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n154|                            <span class=\"ml-3\">Loading documents...</span>\n155|                        </div>\n156|                    </td>\n157|                </tr>\n158|            `;\n159|        }\n160|    }\n161|    \n162|    /**\n163|     * Show load error in table\n164|     */\n165|    #showLoadError(errorMessage) {\n166|        if (this.#domElements.tbody) {\n167|            this.#domElements.tbody.innerHTML = `\n168|                <tr class=\"border-b border-border-light dark:border-border-dark\">\n169|                    <td colspan=\"6\" class=\"px-6 py-8 text-center text-red-500\">\n170|                        Error loading documents: ${escapeHtml(errorMessage)}\n171|                        <br><span class=\"text-sm text-muted-light dark:text-muted-dark\">Make sure the backend is running and accessible.</span>\n172|                        <br><button onclick=\"documentManager.loadDocuments()\" class=\"mt-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\">Retry</button>\n173|                    </td>\n174|                </tr>\n175|            `;\n176|        }\n177|    }\n178|    \n179|    /**\n180|     * Filter documents based on current filter values\n181|     */\n182|    #filterDocuments() {\n183|        if (!this.#documents || !this.#domElements.tbody) return;\n184|        \n185|        const filters = this.#getCurrentFilters();\n186|        const filtered = this.#documents.filter(doc => this.#matchesAllFilters(doc, filters));\n187|        \n188|        this.#displayDocuments(filtered);\n189|    }\n190|    \n191|    /**\n192|     * Get current filter values from DOM\n193|     */\n194|    #getCurrentFilters() {\n195|        return {\n196|            searchTerm: this.#domElements.searchInput?.value.toLowerCase() || '',\n197|            contentType: this.#domElements.filterContentType?.value || '',\n198|            size: this.#domElements.filterSize?.value || '',\n199|            status: this.#domElements.filterStatus?.value || ''\n200|        };\n201|    }\n202|    \n203|    /**\n204|     * Check if document matches all current filters\n205|     */\n206|    #matchesAllFilters(doc, filters) {\n207|        return this.#matchesSearchFilter(doc, filters.searchTerm) &&\n208|               this.#matchesContentTypeFilter(doc, filters.contentType) &&\n209|               this.#matchesSizeFilter(doc, filters.size) &&\n210|               this.#matchesStatusFilter(doc, filters.status);\n211|    }\n212|    \n213|    /**\n214|     * Check if document matches search filter\n215|     */\n216|    #matchesSearchFilter(doc, searchTerm) {\n217|        if (!searchTerm) return true;\n218|        \n219|        const searchableText = [\n220|            doc.title,\n221|            doc.originalFilename,\n222|            doc.contentType,\n223|            doc.status,\n224|            formatBytes(doc.sizeBytes),\n225|            doc.id,\n226|            ...(doc.tags || [])\n227|        ].join(' ').toLowerCase();\n228|        \n229|        return searchableText.includes(searchTerm);\n230|    }\n231|    \n232|    /**\n233|     * Check if document matches content type filter\n234|     */\n235|    #matchesContentTypeFilter(doc, contentType) {\n236|        return !contentType || doc.contentType.startsWith(contentType);\n237|    }\n238|    \n239|    /**\n240|     * Check if document matches size filter\n241|     */\n242|    #matchesSizeFilter(doc, sizeFilter) {\n243|        if (!sizeFilter) return true;\n244|        \n245|        const filterConfig = DocumentManager.#CONFIG.SIZE_FILTERS[sizeFilter.toUpperCase()];\n246|        if (!filterConfig) return true;\n247|        \n248|        const withinMin = !filterConfig.min || doc.sizeBytes >= filterConfig.min;\n249|        const withinMax = !filterConfig.max || doc.sizeBytes < filterConfig.max;\n250|        \n251|        return withinMin && withinMax;\n252|    }\n253|    \n254|    /**\n255|     * Check if document matches status filter\n256|     */\n257|    #matchesStatusFilter(doc, status) {\n258|        return !status || doc.status === status;\n259|    }\n260|    \n261|    /**\n262|     * Display documents in table with improved rendering\n263|     */\n264|    #displayDocuments(documents) {\n265|        if (!documents || documents.length === 0) {\n266|            this.#showEmptyState();\n267|            return;\n268|        }\n269|        \n270|        const rows = documents.map(doc => this.#createDocumentRow(doc)).join('');\n271|        this.#domElements.tbody.innerHTML = rows;\n272|    }\n273|    \n274|    /**\n275|     * Show empty state in table\n276|     */\n277|    #showEmptyState() {\n278|        const message = this.#documents.length === 0 \n279|            ? 'No documents found. Upload your first document to get started!'\n280|            : 'No documents match your filters.';\n281|            \n282|        this.#domElements.tbody.innerHTML = `\n283|            <tr class=\"border-b border-border-light dark:border-border-dark\">\n284|                <td colspan=\"6\" class=\"px-6 py-8 text-center text-muted-light dark:text-muted-dark\">\n285|                    ${message}\n286|                </td>\n287|            </tr>\n288|        `;\n289|    }\n290|    \n291|    /**\n292|     * Create HTML row for a document\n293|     */\n294|    #createDocumentRow(doc) {\n295|        const statusClass = this.#getStatusClass(doc.status);\n296|        const isPdf = doc.contentType === 'application/pdf';\n297|        const rowClass = isPdf ? 'cursor-pointer' : '';\n298|        const onClickAttr = isPdf ? `onclick=\"documentManager.openPdfPreview('${doc.id}', '${escapeHtml(doc.title)}')\"` : '';\n299|        const tagsHtml = this.#createTagsHtml(doc.tags);\n300|        \n301|        return `\n302|            <tr class=\"border-b border-border-light dark:border-border-dark hover:bg-background-light dark:hover:bg-background-dark transition-colors ${rowClass}\" ${onClickAttr}>\n303|                <td class=\"px-6 py-4\">\n304|                    <div class=\"font-medium text-foreground-light dark:text-foreground-dark flex items-center gap-2\">\n305|                        ${isPdf ? '<span class=\"material-symbols-outlined text-red-500 text-sm\">picture_as_pdf</span>' : ''}\n306|                        ${escapeHtml(doc.title)}\n307|                    </div>\n308|                    <div class=\"text-xs text-muted-light dark:text-muted-dark\">${escapeHtml(doc.originalFilename)}</div>\n309|                    ${tagsHtml}\n310|                </td>\n311|                <td class=\"px-6 py-4 text-muted-light dark:text-muted-dark\">${escapeHtml(doc.contentType)}</td>\n312|                <td class=\"px-6 py-4 text-muted-light dark:text-muted-dark\">${formatBytes(doc.sizeBytes)}</td>\n313|                <td class=\"px-6 py-4\">\n314|                    <span class=\"px-2 py-1 text-xs font-medium rounded-full ${statusClass}\">${escapeHtml(doc.status)}</span>\n315|                </td>\n316|                <td class=\"px-6 py-4 text-muted-light dark:text-muted-dark\">${formatDate(doc.createdAt)}</td>\n317|                <td class=\"px-6 py-4\">\n318|                    <button onclick=\"event.stopPropagation(); documentManager.editDocument('${doc.id}')\" \n319|                            class=\"text-blue-500 hover:text-blue-700 dark:hover:text-blue-300 transition-colors mr-2\" \n320|                            title=\"Edit document\">\n321|                        <span class=\"material-symbols-outlined text-xl\">edit</span>\n322|                    </button>\n323|                    <button onclick=\"event.stopPropagation(); documentManager.deleteDocument('${doc.id}')\" \n324|                            class=\"text-red-500 hover:text-red-700 dark:hover:text-red-400 transition-colors\" \n325|                            title=\"Delete document\">\n326|                        <span class=\"material-symbols-outlined text-xl\">delete</span>\n327|                    </button>\n328|                </td>\n329|            </tr>\n330|        `;\n331|    }\n332|    \n333|    /**\n334|     * Create HTML for document tags\n335|     */\n336|    #createTagsHtml(tags) {\n337|        if (!tags || tags.length === 0) return '';\n338|        \n339|        const tagElements = tags.map(tag => \n340|            `<span class=\"px-2 py-0.5 text-xs bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300 rounded\">${escapeHtml(tag)}</span>`\n341|        ).join('');\n342|        \n343|        return `<div class=\"flex flex-wrap gap-1 mt-1\">${tagElements}</div>`;\n344|    }\n345|    \n346|    /**\n347|     * Get CSS classes for document status\n348|     */\n349|    #getStatusClass(status) {\n350|        return DocumentManager.#CONFIG.STATUS_CLASSES[status] || 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n351|    }\n352|    \n353|    /**\n354|     * Handle file upload with validation and progress tracking\n355|     */\n356|    async handleFileUpload() {\n357|        const files = this.#domElements.fileInput?.files;\n358|        if (!files || files.length === 0) return;\n359|        \n360|        const tags = this.#getTagsFromInput();\n361|        const uploadResults = await this.#processFileUploads(files, tags);\n362|        \n363|        this.#handleUploadResults(uploadResults);\n364|    }\n365|    \n366|    /**\n367|     * Get tags from input field\n368|     */\n369|    #getTagsFromInput() {\n370|        const tagsInput = this.#domElements.tagsInput;\n371|        if (!tagsInput || !tagsInput.value.trim()) return [];\n372|        \n373|        return tagsInput.value\n374|            .split(',')\n375|            .map(tag => tag.trim())\n376|            .filter(tag => tag.length > 0);\n377|    }\n378|    \n379|    /**\n380|     * Process multiple file uploads\n381|     */\n382|    async #processFileUploads(files, tags) {\n383|        const results = { successful: [], failed: [] };\n384|        \n385|        for (const file of files) {\n386|            try {\n387|                const validation = validateFile(file, { maxSize: DocumentManager.#CONFIG.MAX_FILE_SIZE });\n388|                if (!validation.isValid) {\n389|                    results.failed.push({ file: file.name, error: validation.error });\n390|                    continue;\n391|                }\n392|                \n393|                await this.#uploadSingleFile(file, tags);\n394|                results.successful.push(file.name);\n395|                \n396|            } catch (error) {\n397|                console.error('Upload error:', error);\n398|                results.failed.push({ file: file.name, error: error.message });\n399|            }\n400|        }\n401|        \n402|        return results;\n403|    }\n404|    \n405|    /**\n406|     * Upload single file\n407|     */\n408|    async #uploadSingleFile(file, tags) {\n409|        const formData = new FormData();\n410|        formData.append('file', file);\n411|        formData.append('title', file.name);\n412|        \n413|        tags.forEach(tag => formData.append('tags', tag));\n414|        \n415|        console.log('Uploading document:', file.name, 'with tags:', tags);\n416|        \n417|        const response = await fetch(API_CONFIG.BASE_URL + API_CONFIG.ENDPOINTS.DOCUMENTS, {\n418|            method: 'POST',\n419|            body: formData\n420|        });\n421|        \n422|        if (!response.ok) {\n423|            throw new Error(`HTTP error! status: ${response.status}`);\n424|        }\n425|        \n426|        return await response.json();\n427|    }\n428|    \n429|    /**\n430|     * Handle upload results and show appropriate messages\n431|     */\n432|    #handleUploadResults(results) {\n433|        // Show error messages for failed uploads\n434|        results.failed.forEach(failure => {\n435|            showMessage(`File \"${failure.file}\": ${failure.error}`, TOAST_TYPES.ERROR);\n436|        });\n437|        \n438|        // Show success message and reload if any uploads succeeded\n439|        if (results.successful.length > 0) {\n440|            this.#clearUploadForm();\n441|            this.loadDocuments();\n442|            \n443|            const message = results.successful.length === 1\n444|                ? `Document \"${results.successful[0]}\" uploaded successfully!`\n445|                : `${results.successful.length} documents uploaded successfully!`;\n446|                \n447|            showMessage(message, TOAST_TYPES.SUCCESS);\n448|        }\n449|    }\n450|    \n451|    /**\n452|     * Clear upload form\n453|     */\n454|    #clearUploadForm() {\n455|        if (this.#domElements.fileInput) {\n456|            this.#domElements.fileInput.value = '';\n457|        }\n458|        if (this.#domElements.tagsInput) {\n459|            this.#domElements.tagsInput.value = '';\n460|        }\n461|    }\n462|    \n463|    /**\n464|     * Edit document - navigate to edit page\n465|     */\n466|    editDocument(documentId) {\n467|        const doc = this.#documents.find(d => d.id === documentId);\n468|        if (!doc) {\n469|            showMessage('Document not found', TOAST_TYPES.ERROR);\n470|            return;\n471|        }\n472|        \n473|        localStorage.setItem('selectedDocument', JSON.stringify(doc));\n474|        window.location.href = 'docDetail.html';\n475|    }\n476|    \n477|    /**\n478|     * Delete document with confirmation\n479|     */\n480|    async deleteDocument(documentId) {\n481|        if (!confirm('Are you sure you want to delete this document?')) {\n482|            return;\n483|        }\n484|        \n485|        try {\n486|            await apiRequest(API_CONFIG.ENDPOINTS.DOCUMENT_BY_ID(documentId), {\n487|                method: 'DELETE'\n488|            });\n489|            \n490|            console.log('Document deleted:', documentId);\n491|            this.loadDocuments();\n492|            showMessage('Document deleted successfully!', TOAST_TYPES.SUCCESS);\n493|            \n494|        } catch (error) {\n495|            console.error('Error deleting document:', error);\n496|            showMessage(`Error deleting document: ${error.message}`, TOAST_TYPES.ERROR);\n497|        }\n498|    }\n499|    \n500|    // PDF Preview Methods\n501|    \n502|    /**\n503|     * Open PDF preview modal\n504|     */\n505|    async openPdfPreview(documentId, title) {\n506|        if (!this.#domElements.pdfModal) return;\n507|        \n508|        this.#showPdfModal(title);\n509|        \n510|        try {\n511|            const totalPages = await apiRequest(API_CONFIG.ENDPOINTS.DOCUMENT_PAGE_COUNT(documentId));\n512|            \n513|            this.#currentPdfPreview = {\n514|                documentId,\n515|                currentPage: 1,\n516|                totalPages\n517|            };\n518|            \n519|            this.#updatePdfNavigation();\n520|            await this.#renderPdfPage(1);\n521|            \n522|        } catch (error) {\n523|            console.error('Error loading PDF:', error);\n524|            this.#showPdfError(`Error loading PDF: ${error.message}`);\n525|        }\n526|    }\n527|    \n528|    /**\n529|     * Show PDF modal\n530|     */\n531|    #showPdfModal(title) {\n532|        this.#domElements.pdfModal.classList.remove('hidden');\n533|        if (this.#domElements.pdfModalTitle) {\n534|            this.#domElements.pdfModalTitle.textContent = title;\n535|        }\n536|        \n537|        // Reset states\n538|        if (this.#domElements.pdfImage) this.#domElements.pdfImage.style.display = 'none';\n539|        if (this.#domElements.pdfLoading) this.#domElements.pdfLoading.style.display = 'block';\n540|        if (this.#domElements.pdfError) this.#domElements.pdfError.classList.add('hidden');\n541|    }\n542|    \n543|    /**\n544|     * Show PDF error\n545|     */\n546|    #showPdfError(message) {\n547|        if (this.#domElements.pdfLoading) this.#domElements.pdfLoading.style.display = 'none';\n548|        if (this.#domElements.pdfError) {\n549|            this.#domElements.pdfError.classList.remove('hidden');\n550|            this.#domElements.pdfError.textContent = message;\n551|        }\n552|    }\n553|    \n554|    /**\n555|     * Update PDF navigation buttons and counters\n556|     */\n557|    #updatePdfNavigation() {\n558|        if (this.#domElements.pageCount) {\n559|            this.#domElements.pageCount.textContent = this.#currentPdfPreview.totalPages;\n560|        }\n561|        if (this.#domElements.pageNum) {\n562|            this.#domElements.pageNum.textContent = this.#currentPdfPreview.currentPage;\n563|        }\n564|        if (this.#domElements.prevPageBtn) {\n565|            this.#domElements.prevPageBtn.disabled = this.#currentPdfPreview.currentPage === 1;\n566|        }\n567|        if (this.#domElements.nextPageBtn) {\n568|            this.#domElements.nextPageBtn.disabled = this.#currentPdfPreview.currentPage === this.#currentPdfPreview.totalPages;\n569|        }\n570|    }\n571|    \n572|    /**\n573|     * Render PDF page\n574|     */\n575|    async #renderPdfPage(pageNum) {\n576|        if (!this.#currentPdfPreview.documentId) return;\n577|        \n578|        try {\n579|            if (this.#domElements.pdfLoading) this.#domElements.pdfLoading.style.display = 'block';\n580|            if (this.#domElements.pdfImage) this.#domElements.pdfImage.style.display = 'none';\n581|            \n582|            const response = await fetch(\n583|                API_CONFIG.BASE_URL + API_CONFIG.ENDPOINTS.DOCUMENT_PAGES(\n584|                    this.#currentPdfPreview.documentId, \n585|                    pageNum, \n586|                    DocumentManager.#CONFIG.PDF_SCALE\n587|                )\n588|            );\n589|            \n590|            if (!response.ok) {\n591|                throw new Error(`Failed to render page: ${response.status}`);\n592|            }\n593|            \n594|            const blob = await response.blob();\n595|            const imageUrl = URL.createObjectURL(blob);\n596|            \n597|            if (this.#domElements.pdfImage) {\n598|                // Clean up previous URL\n599|                if (this.#domElements.pdfImage.src) {\n600|                    URL.revokeObjectURL(this.#domElements.pdfImage.src);\n601|                }\n602|                \n603|                this.#domElements.pdfImage.src = imageUrl;\n604|                this.#domElements.pdfImage.style.display = 'block';\n605|            }\n606|            \n607|            this.#currentPdfPreview.currentPage = pageNum;\n608|            this.#updatePdfNavigation();\n609|            \n610|            if (this.#domElements.pdfLoading) this.#domElements.pdfLoading.style.display = 'none';\n611|            \n612|        } catch (error) {\n613|            console.error('Error rendering page:', error);\n614|            this.#showPdfError(`Error rendering page: ${error.message}`);\n615|        }\n616|    }\n617|    \n618|    /**\n619|     * Navigate to previous PDF page\n620|     */\n621|    previousPage() {\n622|        if (this.#currentPdfPreview.currentPage <= 1) return;\n623|        this.#renderPdfPage(this.#currentPdfPreview.currentPage - 1);\n624|    }\n625|    \n626|    /**\n627|     * Navigate to next PDF page\n628|     */\n629|    nextPage() {\n630|        if (this.#currentPdfPreview.currentPage >= this.#currentPdfPreview.totalPages) return;\n631|        this.#renderPdfPage(this.#currentPdfPreview.currentPage + 1);\n632|    }\n633|    \n634|    /**\n635|     * Close PDF preview modal\n636|     */\n637|    closePdfModal() {\n638|        if (this.#domElements.pdfModal) {\n639|            this.#domElements.pdfModal.classList.add('hidden');\n640|        }\n641|        \n642|        // Clean up image URL\n643|        if (this.#domElements.pdfImage && this.#domElements.pdfImage.src) {\n644|            URL.revokeObjectURL(this.#domElements.pdfImage.src);\n645|            this.#domElements.pdfImage.src = '';\n646|        }\n647|        \n648|        // Reset state\n649|        this.#currentPdfPreview = {\n650|            documentId: null,\n651|            currentPage: 1,\n652|            totalPages: 0\n653|        };\n654|    }\n655|}\n656|\n657|// Initialize global instance for backward compatibility\n658|let documentManager;\n659|document.addEventListener('DOMContentLoaded', () => {\n660|    documentManager = new DocumentManager();\n661|    \n662|    // Make it globally accessible for HTML onclick handlers\n663|    window.documentManager = documentManager;\n664|});","line_range_start":1,"line_range_end":664}}
</function_results>

Let me complete the todo items and mark them as done:

<function_calls>
<invoke name="mark_todo_as_done">
<parameter name="todo_ids">["b07b9df3-ee3b-4909-bcd5-2efcb928056f", "8e743937-da88-42cb-927a-10acbd633083", "02df17ba-4687-4834-8e2b-768a637a7f9f", "d36db795-cf41-4f8c-ae47-5ac775c7c907", "c519a742-810e-4b1c-9112-437942c01a6e"]