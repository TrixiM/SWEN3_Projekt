package fhtw.wien.ocrworker.demo;

import fhtw.wien.ocrworker.dto.DocumentResponse;
import fhtw.wien.ocrworker.dto.OcrResultDto;
import fhtw.wien.ocrworker.service.TesseractOcrService;
import fhtw.wien.ocrworker.service.UnifiedOcrService;
import fhtw.wien.ocrworker.util.FileTypeDetector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * Demo controller for showcasing OCR functionality.
 * Provides endpoints for testing OCR capabilities without requiring the full document flow.
 */
@RestController
@RequestMapping("/demo/ocr")
@CrossOrigin(origins = "*")
public class OcrDemoController {
    
    private static final Logger log = LoggerFactory.getLogger(OcrDemoController.class);
    
    private final TesseractOcrService tesseractOcrService;
    private final FileTypeDetector fileTypeDetector;
    private final UnifiedOcrService unifiedOcrService;
    
    public OcrDemoController(
            TesseractOcrService tesseractOcrService,
            FileTypeDetector fileTypeDetector,
            UnifiedOcrService unifiedOcrService) {
        
        this.tesseractOcrService = tesseractOcrService;
        this.fileTypeDetector = fileTypeDetector;
        this.unifiedOcrService = unifiedOcrService;
    }
    
    /**\n     * Demo endpoint for direct OCR processing of uploaded files.\n     * Bypasses MinIO storage and processes files directly.\n     *\n     * @param file the image or PDF file to process\n     * @param language optional OCR language (defaults to 'eng')\n     * @return OCR processing results\n     */\n    @PostMapping(value = \"/process\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\n    public ResponseEntity<OcrDemoResult> processFile(\n            @RequestParam(\"file\") MultipartFile file,\n            @RequestParam(value = \"language\", defaultValue = \"eng\") String language) {\n        \n        log.info(\"Demo OCR processing: filename={}, size={} bytes, language={}\", \n                file.getOriginalFilename(), file.getSize(), language);\n        \n        try {\n            // Validate file\n            if (file.isEmpty()) {\n                return ResponseEntity.badRequest().body(\n                        OcrDemoResult.error(\"File cannot be empty\"));\n            }\n            \n            // Check file type\n            FileTypeDetector.FileType fileType = fileTypeDetector.getFileTypeFromContentType(file.getContentType());\n            if (fileType == FileTypeDetector.FileType.UNSUPPORTED) {\n                return ResponseEntity.badRequest().body(\n                        OcrDemoResult.error(\"Unsupported file type: \" + file.getContentType() + \n                                \". \" + fileTypeDetector.getSupportedTypesDescription()));\n            }\n            \n            long startTime = System.currentTimeMillis();\n            \n            // Create mock document for processing\n            DocumentResponse mockDocument = createMockDocument(file, fileType);\n            \n            // For demo purposes, we'll bypass MinIO and process the file directly\n            OcrResultDto result = processFileDirectly(file.getBytes(), mockDocument, language);\n            \n            long totalTime = System.currentTimeMillis() - startTime;\n            \n            log.info(\"Demo OCR completed: {} characters extracted in {}ms\", \n                    result.totalCharacters(), totalTime);\n            \n            return ResponseEntity.ok(OcrDemoResult.success(result, fileType.getDescription()));\n            \n        } catch (Exception e) {\n            log.error(\"Demo OCR processing failed for file: {}\", file.getOriginalFilename(), e);\n            return ResponseEntity.status(500).body(\n                    OcrDemoResult.error(\"OCR processing failed: \" + e.getMessage()));\n        }\n    }\n    \n    /**\n     * Demo endpoint for testing OCR system health and capabilities.\n     *\n     * @return system status and OCR capabilities\n     */\n    @GetMapping(\"/health\")\n    public ResponseEntity<Map<String, Object>> getOcrHealth() {\n        Map<String, Object> health = new HashMap<>();\n        \n        try {\n            // Check Tesseract availability\n            boolean tesseractAvailable = tesseractOcrService.isTesseractAvailable();\n            health.put(\"tesseract_available\", tesseractAvailable);\n            \n            // Get available languages\n            String[] availableLanguages = tesseractOcrService.getAvailableLanguages();\n            health.put(\"supported_languages\", availableLanguages);\n            \n            // Get supported file types\n            health.put(\"supported_file_types\", fileTypeDetector.getSupportedTypesDescription());\n            \n            // Overall status\n            health.put(\"status\", tesseractAvailable ? \"HEALTHY\" : \"DEGRADED\");\n            health.put(\"timestamp\", Instant.now().toString());\n            \n            log.info(\"OCR health check completed: tesseract_available={}\", tesseractAvailable);\n            \n            return ResponseEntity.ok(health);\n            \n        } catch (Exception e) {\n            log.error(\"OCR health check failed\", e);\n            health.put(\"status\", \"ERROR\");\n            health.put(\"error\", e.getMessage());\n            health.put(\"timestamp\", Instant.now().toString());\n            \n            return ResponseEntity.status(500).body(health);\n        }\n    }\n    \n    /**\n     * Creates a synthetic test document for OCR demonstration.\n     *\n     * @return demo result with sample OCR output\n     */\n    @GetMapping(\"/test\")\n    public ResponseEntity<OcrDemoResult> createTestDocument() {\n        log.info(\"Creating synthetic OCR test document\");\n        \n        try {\n            // Create a simple test result\n            OcrResultDto testResult = OcrResultDto.success(\n                    UUID.randomUUID(),\n                    \"Demo Test Document\",\n                    \"This is a sample text extracted from a test document.\\n\\nIt contains multiple lines and paragraphs to demonstrate OCR capability.\\n\\nThe system can extract text from both PDF documents and images.\",\n                    java.util.List.of(\n                            OcrResultDto.fromTesseractResult(1, \"This is a sample text extracted from a test document.\", 95, 150),\n                            OcrResultDto.fromTesseractResult(2, \"It contains multiple lines and paragraphs to demonstrate OCR capability.\", 92, 180),\n                            OcrResultDto.fromTesseractResult(3, \"The system can extract text from both PDF documents and images.\", 88, 165)\n                    ),\n                    \"eng\",\n                    92,\n                    495\n            );\n            \n            return ResponseEntity.ok(OcrDemoResult.success(testResult, \"Demo Test Document\"));\n            \n        } catch (Exception e) {\n            log.error(\"Failed to create test document\", e);\n            return ResponseEntity.status(500).body(\n                    OcrDemoResult.error(\"Failed to create test document: \" + e.getMessage()));\n        }\n    }\n    \n    /**\n     * Processes a file directly for demo purposes (bypasses MinIO).\n     *\n     * @param fileData the file data\n     * @param document mock document metadata\n     * @param language OCR language\n     * @return OCR result\n     */\n    private OcrResultDto processFileDirectly(byte[] fileData, DocumentResponse document, String language) {\n        // This is a simplified version that would need to be adapted to work without MinIO\n        // For now, we'll simulate the processing\n        \n        try {\n            // In a full implementation, you would:\n            // 1. Store the file data temporarily\n            // 2. Process it through the OCR pipeline\n            // 3. Return the results\n            \n            // For demo purposes, create a basic result\n            return OcrResultDto.success(\n                    document.id(),\n                    document.title(),\n                    \"[Demo Mode] OCR would extract text from the uploaded file here.\\n\\nActual implementation requires full MinIO integration.\",\n                    java.util.List.of(\n                            OcrResultDto.fromTesseractResult(1, \"Demo OCR extraction result\", 85, 1000)\n                    ),\n                    language,\n                    85,\n                    1000\n            );\n            \n        } catch (Exception e) {\n            return OcrResultDto.failure(\n                    document.id(),\n                    document.title(),\n                    \"Demo processing failed: \" + e.getMessage(),\n                    System.currentTimeMillis()\n            );\n        }\n    }\n    \n    /**\n     * Creates a mock document for demo purposes.\n     *\n     * @param file the uploaded file\n     * @param fileType the detected file type\n     * @return mock document response\n     */\n    private DocumentResponse createMockDocument(MultipartFile file, FileTypeDetector.FileType fileType) {\n        return new DocumentResponse(\n                UUID.randomUUID(),\n                \"Demo: \" + file.getOriginalFilename(),\n                file.getOriginalFilename(),\n                file.getContentType(),\n                file.getSize(),\n                \"demo-bucket\",\n                \"demo/\" + file.getOriginalFilename(),\n                \"demo://\" + file.getOriginalFilename(),\n                \"demo-checksum\",\n                null, // DocumentStatus - would need to import from main app\n                1L,\n                Instant.now(),\n                Instant.now()\n        );\n    }\n    \n    /**\n     * Demo result wrapper for OCR processing.\n     */\n    public static class OcrDemoResult {\n        private final boolean success;\n        private final String message;\n        private final OcrResultDto ocrResult;\n        private final String fileType;\n        private final Instant timestamp;\n        \n        private OcrDemoResult(boolean success, String message, OcrResultDto ocrResult, String fileType) {\n            this.success = success;\n            this.message = message;\n            this.ocrResult = ocrResult;\n            this.fileType = fileType;\n            this.timestamp = Instant.now();\n        }\n        \n        public static OcrDemoResult success(OcrResultDto ocrResult, String fileType) {\n            return new OcrDemoResult(true, \"OCR processing completed successfully\", ocrResult, fileType);\n        }\n        \n        public static OcrDemoResult error(String message) {\n            return new OcrDemoResult(false, message, null, null);\n        }\n        \n        // Getters\n        public boolean isSuccess() { return success; }\n        public String getMessage() { return message; }\n        public OcrResultDto getOcrResult() { return ocrResult; }\n        public String getFileType() { return fileType; }\n        public Instant getTimestamp() { return timestamp; }\n    }\n}